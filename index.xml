<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wolkasem的小站</title><link>https://blogs.wolkasem.cn/</link><description>wolkasem的小站</description><generator>Hugo 0.139.3 &amp; FixIt v0.3.15</generator><language>zh-CN</language><lastBuildDate>Fri, 06 Dec 2024 21:47:00 +0800</lastBuildDate><atom:link href="https://blogs.wolkasem.cn/index.xml" rel="self" type="application/rss+xml"/><item><title>什么是交互设计</title><link>https://blogs.wolkasem.cn/posts/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/</link><pubDate>Fri, 06 Dec 2024 21:47:00 +0800</pubDate><guid>https://blogs.wolkasem.cn/posts/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/</guid><category domain="https://blogs.wolkasem.cn/categories/%E6%9D%82%E8%B0%88/">杂谈</category><description>&lt;p>该文章转载自：&lt;a href="https://www.zhihu.com/question/19788122"target="_blank" rel="external nofollow noopener noreferrer">什么是交互设计&lt;/a>&lt;/p>
&lt;h2 id="什么是交互设计" class="heading-element">&lt;span>什么是交互设计&lt;/span>
 &lt;a href="#%e4%bb%80%e4%b9%88%e6%98%af%e4%ba%a4%e4%ba%92%e8%ae%be%e8%ae%a1" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>如果我们问，交互设计是什么？从网上各种定义中似乎能很快就能知道答案。&lt;/p>
&lt;blockquote>
&lt;p>交互设计，又称互动设计（Interaction Design, 缩写 IxD 或者 IaD），是定义、设计人造系统的行为的设计领域。在于定义人造物的行为方式（the “interaction”，即人工制品在特定场景下的反应方式）相关的界面。&lt;/p>
&lt;p>—— 来自 IxDC&lt;/p>
&lt;p>定义、设计人造系统的行为的设计领域，它定义了两个或多个互动的个体之间交流的内容和结构，使之互相配合，共同达成某种目的。交互设计努力去创造和建立的是人与产品及服务之间有意义的关系，以“在充满社会复杂性的物质世界中嵌入信息技术”为中心。交互系统设计的目标可以从“可用性”和“用户体验”两个层面上进行分析，关注以人为本的用户需求。&lt;/p>
&lt;p>——来自 李世国 顾振宇．《普通高等教育工业设计专业“十二五”规划教材——交互设计》中国水利水电出版社，2012年&lt;/p>
&lt;/blockquote>
&lt;p>但很显然，如果根据定义来看，我们可能无法真正理解交互设计是什么，又为何如此去定义。因为在这个过程中，大量直观的流程、细节全部被抽象压缩精简成了一个概念。如果想真正能够理解透概念，最好的做法便是「举反例」——也就是思考为什么是这样而不是那样？&lt;/p>
&lt;p>所以与其从正面去说交互设计是什么，有什么好处，不如质疑它的合理，思考如果没有了它世界会怎么样。当然，我们进行质疑的最终目的，不是为了搞个大新闻，去否交互设计的价值，而是通过这种质疑，去理解交互设计存在的意义，它的合理性，从而加深对于交互设计的理解。毕竟，一个真正合理的东西，从任何角度进行质疑都不会有任何破绽。&lt;/p>
&lt;p>所以，第一件事，我们自问一下，交互设计的合理性在哪？世界上没有交互设计，还能不能正常运作？它真的必须存在在世界上吗？它的存在是有什么必然性吗？&lt;/p>
&lt;p>只有我们肯定了交互设计存在的合理性，诸如 「交互设计是如何诞生的？交互设计有什么用？我们为什么需要去研究交互设计？ 怎么去做交互设计？」这样的问题才有讨论的必要。&lt;/p>
&lt;p>为了研究其合理性，我想第一个问题应该是要界定交互设计的边界。&lt;/p>
&lt;h2 id="一界定交互设计的标准是什么" class="heading-element">&lt;span>一、界定交互设计的标准是什么？&lt;/span>
 &lt;a href="#%e4%b8%80%e7%95%8c%e5%ae%9a%e4%ba%a4%e4%ba%92%e8%ae%be%e8%ae%a1%e7%9a%84%e6%a0%87%e5%87%86%e6%98%af%e4%bb%80%e4%b9%88" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>能被称为交互设计的界定标准是什么？因为如果没有这个标准，一切皆可以被称为「交互设计」，那么我们所有讨论的案例、理论、设计都将会是没有意义的。&lt;/p>
&lt;p>那怎么办去界定呢？很简单我们出几个问题自问一下：&lt;/p>
&lt;ul>
&lt;li>一瓶水的包装设计能不能被称为交互设计？&lt;/li>
&lt;li>一个栏杆的指示设计设计能不能被称为交互设计？&lt;/li>
&lt;li>飞机的控制系统仪表盘设计能不能被称为交互设计？&lt;/li>
&lt;li>PC、移动端的显示界面设计能不能被称为交互设计？&lt;/li>
&lt;/ul>
&lt;p>&lt;img loading="lazy" src="https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-2024-12-07-22-25-55.webp" alt="image-2024-12-07-22-25-55" srcset="https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-2024-12-07-22-25-55.webp?size=small, https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-2024-12-07-22-25-55.webp?size=medium 1.5x, https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-2024-12-07-22-25-55.webp?size=large 2x" data-title="image-2024-12-07-22-25-55" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>&lt;/p>
&lt;p>我想最后一个问题不言自明，我们现在通常所说的交互设计，指的就是设计PC或者移动端的各种界面。那前面三个呢？&lt;/p>
&lt;p>如果仅仅从「交互」的角度来考虑，包装、VI、仪表盘的设计都的确与「交互」有关。毕竟每一个人造物都对人的行为都具有引导或者是反馈作用。但是，&lt;strong>难道存在交互，就应该被称为「交互设计」吗？&lt;/strong>&lt;/p>
&lt;p>如果以这样来界定「交互设计」的范围的话，你会发现，所有人造物的设计都可以属于「交互设计」的一部分，那我们还有必要去单独创造一个「交互设计」的词吗？我们之所以创造一个单独的词来称呼，是因为这个词所指代的内容必然有其独特性。而正是这种独特性，将「交互设计」从「包装设计」、「VI设计」、「产品设计」等设计词汇中区分开来。因为我们发现，把设计PC或者移动端的各种界面这种行为叫成「包装设计」、「VI 设计」或者「产品设计」并不合适，所有才会新创一个词来指代设计行为。&lt;/p>
&lt;p>&lt;strong>所以，「交互」并不是一个科学有效的界定标准，我们并不能，也不应该单纯地从「交互」这个字面意义来界定交互设计的范围，过分夸大交互设计包含的领域。&lt;/strong>&lt;/p>
&lt;p>所以我们需要思考了，包装和电脑之间的差异在哪？飞机控制系统和一个指示牌之间的差异在哪？去控制一架飞机和控制一辆三轮车之间的差异在哪？&lt;/p>
&lt;p>&lt;img loading="lazy" src="https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-1-2024-12-07-22-25-44.webp" alt="image-1-2024-12-07-22-25-44" srcset="https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-1-2024-12-07-22-25-44.webp?size=small, https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-1-2024-12-07-22-25-44.webp?size=medium 1.5x, https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-1-2024-12-07-22-25-44.webp?size=large 2x" data-title="image-1-2024-12-07-22-25-44" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>&lt;/p>
&lt;p>我们能够明显的感受到电脑、飞机所包含内容的复杂程度与包装、三轮车并不在一个量级。&lt;/p>
&lt;p>如果人们能理解一瓶水的包装，看懂一个指示牌的意思，那么我们是不是根本不需要设计任何的交互？换句话说，&lt;strong>如果产品本身便能够表达或是引导产品功能的使用方式，那么根本不需要设计任何的交互。&lt;/strong>&lt;/p>
&lt;p>再来看信息技术产物——打印机、电脑、手机，或者诸如飞机控制系统、动车控制系统这般庞大的人工系统，普通人能够快速理解吗？我想答案是否定的。&lt;/p>
&lt;p>正是因为人无法快速去理解其中的运行逻辑，才会导致人无法快速掌握和理解这些人造物，那么这些人造系统就失去了被创造出来的价值。&lt;/p>
&lt;p>那而如何让人快速掌握这些人造物，符合这些人造物的创造的意图呢？很显然，我们需要一个超越人造系统本身之外的「对话机制」，通过这种机制有效地去和系统沟通，而这种「对话机制」就是我们所谓的「人机交互」。&lt;/p>
&lt;p>如此一来，界定交互设计的标准似乎就浮出水面了——&lt;strong>设计的对象是否是复杂的人造系统 ？&lt;/strong>（「复杂」一词的界定则是「能否被人脑快速理解」） 如果人造系统很简单，那么就不需要存在多余的「对话机制」，因为人脑能够快速理解这个人造物。而人造系统很复杂，人脑无法理解人造系统的话，那我们就需要一个「对话机制」来辅助我们驾驭人造系统。&lt;/p>
&lt;p>而将此标准套到前面几个例子中，我们能发现，「包装设计」、「VI 设计」很自然地被排除了，因为它们简单到并不需要存在任何其他「对话机制」。而仪表盘和电脑的显示界面被保留下来了。&lt;/p>
&lt;p>&lt;img loading="lazy" src="https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-2024-12-07-22-25-32.webp" alt="image-2024-12-07-22-25-32" srcset="https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-2024-12-07-22-25-32.webp?size=small, https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-2024-12-07-22-25-32.webp?size=medium 1.5x, https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-2024-12-07-22-25-32.webp?size=large 2x" data-title="image-2024-12-07-22-25-32" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>&lt;/p>
&lt;p>那问题来了：明明仪表盘的设计是属于人机工程学的领域啊，为什么被这个标准界定到了交互设计呢？的确，仪表盘设计，根据我们的经验，是不应该属于交互设计的范畴。那么，是这个标准出问题了吗？&lt;/p>
&lt;p>没错，是出了问题，我们少了一个限制条件。&lt;/p>
&lt;p>因为在传统工业设计领域中，是有专门研究复杂人造系统的「对话机制」的学科的——那就是人机工程学。打印机界面、仪表盘等所有物理界面相关的设计，均能用人机工程学的理论和方法指导和完成。按我们刚才的界定标准进行划分，很多人机工程学的设计应用都会变成交互设计。但是这和我们日常的经验并不相符对不对？&lt;/p>
&lt;p>于是，我们不经要问了，交互设计和人机工程学到底有什么关系？为什么现在的交互设计会是一个独立学科呢？也许我们只有把这个问题解决了，才能更加清楚地界定出来「交互设计」的范围。&lt;/p>
&lt;h2 id="二交互设计为什么能成为独立学科" class="heading-element">&lt;span>二、交互设计为什么能成为独立学科？&lt;/span>
 &lt;a href="#%e4%ba%8c%e4%ba%a4%e4%ba%92%e8%ae%be%e8%ae%a1%e4%b8%ba%e4%bb%80%e4%b9%88%e8%83%bd%e6%88%90%e4%b8%ba%e7%8b%ac%e7%ab%8b%e5%ad%a6%e7%a7%91" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>既然人机工程学能解决所有物理界面相关的设计问题，那么「交互设计为什么能成为独立学科？」，这是很自然会产生的第二个问题。毕竟，如果没有特异化的问题产生，没有对应的特殊的理论、方法和思想出现，那么一个学科是不应该被独立出来的。&lt;/p>
&lt;p>再回过来看看两者的差别。人机工程学研究是的物理界面，但是信息技术诞生出来的界面是什么界面？&lt;strong>虚拟界面&lt;/strong> ，对不对？&lt;/p>
&lt;p>虽然物理界面能用人机工程学的理论方法指导，但是信息技术诞生出来的那些虚拟界面（屏幕）呢？人机工程学的大部分理论、方法和工具在电子屏幕这个黑色平面前似乎发挥不了太多作用。因为虚拟界面完全没有物理限制，操作限制。我连续按一个键，每一次都可以反馈出完全不同的结果。屏幕可以呈现的内容完全超出了人机工程的想象范围。换句话说， &lt;strong>人机工程学的理论、方法、工具其实是全面地指导这个新兴事物的发展&lt;/strong>，这个领域必须去寻找新的理论、技术、方法的支撑。&lt;/p>
&lt;p>那实际上，这个独特新型研究领域在认知心理学、行为学、计算机科学等领域找到支撑点。揉捏了那么多不同的领域知识后，它拥有了自己的理论、方法、工具，最后形成了单独一个学科。而这个学科，现在便被称为「人机交互」，「交互设计」是其面向移动端界面的一个细分。&lt;/p>
&lt;p>如果我们返回到历史进行验证的话，我们能够找到证明我们推理的历史事实：&lt;/p>
&lt;blockquote>
&lt;p>交互设计发展期（1980年-1995年）：理论方面，从人机工程学独立出来，更加强调认知心理学以及行为学和社会学等学科的理论指导。&lt;/p>
&lt;/blockquote>
&lt;p>经过如此的溯源之后，我们可以发现：**「人造系统能否被人脑快速理解」**是界定是否是交互设计的一个必要条件，而另一个必要条件则是——「对话机制」的呈现不是物理界面，而是虚拟界面。&lt;/p>
&lt;p>那么最后的界定标准似乎就浮现出来了：&lt;strong>设计的对象为复杂人造系统，需要设计的「对话机制」是虚拟的 。&lt;/strong>（这样不仅仅是PC、移动端的界面，目前正在兴起的语音设计也被包括在内）&lt;/p>
&lt;h2 id="三交互设计独有的价值是什么" class="heading-element">&lt;span>三、交互设计独有的价值是什么?&lt;/span>
 &lt;a href="#%e4%b8%89%e4%ba%a4%e4%ba%92%e8%ae%be%e8%ae%a1%e7%8b%ac%e6%9c%89%e7%9a%84%e4%bb%b7%e5%80%bc%e6%98%af%e4%bb%80%e4%b9%88" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>当我们搞清楚交互设计的界定标准之后，接下来就可以正式讨论其合理性了，即：交互设计独有的价值是什么？ 因为如果没有独特的价值，那么这个领域就很容易被取代，存在的合理性会受到很大的质疑。&lt;/p>
&lt;p>我们已经知道了，人造物的复杂性（黑箱）使得人无法去快速掌握它。显然的，交互设计的根本目的就是让人能掌握人造物。&lt;/p>
&lt;p>在此之前，我们需要思考一下，为什么我们无法快速掌握人造物呢？&lt;/p>
&lt;p>这跟用户的「心智模型」有关。&lt;/p>
&lt;blockquote>
&lt;p>心智模型的理论是基于一个试图对某事做出合理解释的个人会发展可行的方法的假设，在有限的领域知识和有限的信息处理能力上，产生合理的解释。&lt;/p>
&lt;/blockquote>
&lt;p>上面这段话估计怎么样都很难看懂，还是拿水壶举个例子吧。&lt;/p>
&lt;p>&lt;img loading="lazy" src="https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-1-2024-12-07-22-25-15.webp" alt="image-1-2024-12-07-22-25-15" srcset="https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-1-2024-12-07-22-25-15.webp?size=small, https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-1-2024-12-07-22-25-15.webp?size=medium 1.5x, https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-1-2024-12-07-22-25-15.webp?size=large 2x" data-title="image-1-2024-12-07-22-25-15" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>&lt;/p>
&lt;p>现实生活中有左边那样一个水壶，当我们看到它后，在我们心里就会想出它的使用方式——把手是拿来握的，顶盖的圆环拿来捏，壶嘴拿出倒水…简单来说就是，我们看到水壶就知道它是怎么用的。&lt;/p>
&lt;p>但是，右边的水壶壶嘴几乎不可见，你看到之后还能那么容易得找到出水口吗？&lt;/p>
&lt;p>换话说，**物的形态暗示是有其功能的，而一旦物没有了特殊的形态，那么人们将难以去理解功能。**当它的形态暗示不了它的功能的时候，我们的心智模型构建就会出现问题。一旦出现问题，我们便无法掌握人造物。&lt;/p>
&lt;p>面对一个未知的复杂的人造物时，光是从形态上，我们便无法直接明了地理解它的基本用途。所以肯定无法形成有效的心智模型。这样就会导致无法掌握人造物，更不能可能去理解创造的意图。&lt;/p>
&lt;p>&lt;img loading="lazy" src="https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-2024-12-07-22-24-50.webp" alt="image-2024-12-07-22-24-50" srcset="https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-2024-12-07-22-24-50.webp?size=small, https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-2024-12-07-22-24-50.webp?size=medium 1.5x, https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-2024-12-07-22-24-50.webp?size=large 2x" data-title="image-2024-12-07-22-24-50" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>&lt;/p>
&lt;p>那么这个时候交互设计就登场了。作为人机的一种「对话机制」，它很好地削弱了人造物的复杂性，大大降低人的认知负担，使得人能够快速地构建对人造物的认知。&lt;/p>
&lt;p>&lt;img loading="lazy" src="https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image.webp" alt="image" srcset="https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image.webp?size=small, https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image.webp?size=medium 1.5x, https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image.webp?size=large 2x" data-title="image" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>&lt;/p>
&lt;p>但是削弱了人造物的复杂性并不是交互设计独有的价值，我们也可以通过减少功能来削弱复杂性，或者让人经过长期学习来掌握人造物。&lt;/p>
&lt;p>但是很多时候，功能是无法被削减的，长期学习也并不现实。&lt;/p>
&lt;p>比如给飞机的控制仪表盘削弱复杂性，减少功能按钮的确可以促使飞行员更快速、有效地理解如何使用该此控制系统，但是功能按钮的减少会带来诸如安全、操控性等方面的问题，这必然是不能接受的。&lt;/p>
&lt;p>而使人经过长期训练来学习掌握人造物，这更是不现实。毕竟我们不可能花费大量时间去学习操作电子元件或者写代码。&lt;/p>
&lt;p>而这就是交互设计区别于其他掌握人造物的方法的最重要的一点：在保持原有功能的基础上削弱人造物的复杂性，使人能够以高效构建对人造物的认知。 也是其独有的价值所在。&lt;/p>
&lt;p>可能有人会问了，那交互设计是如何做到这一点呢的？&lt;/p>
&lt;p>这个就是我之前有提到的，最大程度地符合用户的心智模型，便能够很轻松地削弱人造物的复杂性。&lt;/p>
&lt;p>&lt;img loading="lazy" src="https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-1.webp" alt="image-1" srcset="https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-1.webp?size=small, https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-1.webp?size=medium 1.5x, https://wolkasem-oss-aliyun-bucket.oss-cn-heyuan.aliyuncs.com/image/vscode/image-1.webp?size=large 2x" data-title="image-1" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>&lt;/p>
&lt;p>例如上图这个炸弹人的游戏引入了“手柄”这种实物概念，用户能够快速地将印象中对于“手柄”的概念移植到这个游戏上，建立「控制手柄 = 控制人物移动」的心智模型，由此快速地构建了基本的游戏操作方法的认知。这就是削弱复杂性的一种典型好用的方法。&lt;/p>
&lt;p>而到此为止，什么是交互设计，大家应该有了一个相对明确的答案。&lt;/p>
&lt;p>用我自己的话说——&lt;strong>交互设计脱胎于人机工程学，融合认知心理学、行为学、计算机科学等学科理论方法 &lt;strong>（前世今生），是&lt;/strong>复杂人造物与人之间以虚拟界面为载体的对话机制&lt;/strong>（是什么）。交互设计通过&lt;strong>构建有效的用户心智模型&lt;/strong>（方法），在**保持系统原有功能的基础上削弱人造物的复杂性 **（独特性），&lt;strong>让人用更低的成本建立对人造物的基本认知&lt;/strong>（直接目的），&lt;strong>使人能够掌握人造物，并让人造物的使用符合创造的意图&lt;/strong>（根本目的）。&lt;/p>
&lt;p>再来看看网上的一些定义，是不是会发现豁然开朗了呢？&lt;/p>
&lt;blockquote>
&lt;p>交互设计，又称互动设计（Interaction Design, 缩写 IxD 或者 IaD），是定义、设计人造系统的行为的设计领域。在于定义人造物的行为方式（the “interaction”，即人工制品在特定场景下的反应方式）相关的界面。&lt;/p>
&lt;p>定义、设计人造系统的行为的设计领域，它定义了两个或多个互动的个体之间交流的内容和结构，使之互相配合，共同达成某种目的。交互设计努力去创造和建立的是人与产品及服务之间有意义的关系，以“在充满社会复杂性的物质世界中嵌入信息技术”为中心。交互系统设计的目标可以从“可用性”和“用户体验”两个层面上进行分析，关注以人为本的用户需求。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Github Action</title><link>https://blogs.wolkasem.cn/posts/github-action/</link><pubDate>Sun, 24 Nov 2024 15:17:00 +0800</pubDate><guid>https://blogs.wolkasem.cn/posts/github-action/</guid><category domain="https://blogs.wolkasem.cn/categories/github/">Github</category><description>&lt;h2 id="为什么要配置自动发布" class="heading-element">&lt;span>为什么要配置自动发布&lt;/span>
 &lt;a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e9%85%8d%e7%bd%ae%e8%87%aa%e5%8a%a8%e5%8f%91%e5%b8%83" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>基于前两个部分组成方案中，一次更新过程如下：&lt;/p>
&lt;ol>
&lt;li>在本地写好md文章&lt;/li>
&lt;li>用hugo发布到public/目录下&lt;/li>
&lt;li>复制到本地仓库(也可以将git本地仓库配置到public/目录下，但因为我同时也在用git管理md，这么做会将两个项目的git纠缠在一起，不够清爽，违背我的审美)&lt;/li>
&lt;li>再推到远程仓库&lt;/li>
&lt;/ol>
&lt;p>这样做的弊端是：&lt;/p>
&lt;ol>
&lt;li>本地必须管理两个git仓库，一个是hugo-md源码库，另一个是生成的静态网页库，增加了更新文章的复杂度；&lt;/li>
&lt;li>发布必须先发一个本地，然后手动上传，也增加了出错的风险。&lt;/li>
&lt;/ol>
&lt;p>一个理想的状态是，我只负责写文，和将好的md提交到git备份，然后就可以坐等网站内容更新了。github官方提供的GitHub Action正可以满足这个需求。&lt;/p>
&lt;p>这样的需求下，整个Github Action只需要做两件事：&lt;/p>
&lt;ol>
&lt;li>编译，生成静态文件&lt;/li>
&lt;li>部署，把静态文件移动到合适的位置
然后我们再通过git push来触发Github Action就可以了。&lt;/li>
&lt;/ol></description></item><item><title>第一篇文章</title><link>https://blogs.wolkasem.cn/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</link><pubDate>Fri, 01 Jan 2021 15:04:05 +0800</pubDate><guid>https://blogs.wolkasem.cn/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</guid><category domain="https://blogs.wolkasem.cn/categories/test/">Test</category><description>&lt;h2 id="第一篇文章" class="heading-element">&lt;span>第一篇文章&lt;/span>
 &lt;a href="#%e7%ac%ac%e4%b8%80%e7%af%87%e6%96%87%e7%ab%a0" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;h2 id="特性" class="heading-element">&lt;span>特性&lt;/span>
 &lt;a href="#%e7%89%b9%e6%80%a7" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;h3 id="优雅的设计优雅的阅读体验时刻关注最新最热的新闻" class="heading-element">&lt;span>优雅的设计，优雅的阅读体验，时刻关注最新最热的新闻。&lt;/span>
 &lt;a href="#%e4%bc%98%e9%9b%85%e7%9a%84%e8%ae%be%e8%ae%a1%e4%bc%98%e9%9b%85%e7%9a%84%e9%98%85%e8%af%bb%e4%bd%93%e9%aa%8c%e6%97%b6%e5%88%bb%e5%85%b3%e6%b3%a8%e6%9c%80%e6%96%b0%e6%9c%80%e7%83%ad%e7%9a%84%e6%96%b0%e9%97%bb" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;h3 id="支持-github-登录支持数据同步" class="heading-element">&lt;span>支持 Github 登录，支持数据同步。&lt;/span>
 &lt;a href="#%e6%94%af%e6%8c%81-github-%e7%99%bb%e5%bd%95%e6%94%af%e6%8c%81%e6%95%b0%e6%8d%ae%e5%90%8c%e6%ad%a5" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;h3 id="默认-30-分钟缓存登录用户可以强制拉取最新数据但也会根据内容源的更新间隔设置不同的爬虫间隔时间最快两分钟节约资源的同时避免频繁爬取而导致-ip-封禁" class="heading-element">&lt;span>默认 30 分钟缓存，登录用户可以强制拉取最新数据。但也会根据内容源的更新间隔设置不同的爬虫间隔时间（最快两分钟），节约资源的同时避免频繁爬取而导致 IP 封禁。&lt;/span>
 &lt;a href="#%e9%bb%98%e8%ae%a4-30-%e5%88%86%e9%92%9f%e7%bc%93%e5%ad%98%e7%99%bb%e5%bd%95%e7%94%a8%e6%88%b7%e5%8f%af%e4%bb%a5%e5%bc%ba%e5%88%b6%e6%8b%89%e5%8f%96%e6%9c%80%e6%96%b0%e6%95%b0%e6%8d%ae%e4%bd%86%e4%b9%9f%e4%bc%9a%e6%a0%b9%e6%8d%ae%e5%86%85%e5%ae%b9%e6%ba%90%e7%9a%84%e6%9b%b4%e6%96%b0%e9%97%b4%e9%9a%94%e8%ae%be%e7%bd%ae%e4%b8%8d%e5%90%8c%e7%9a%84%e7%88%ac%e8%99%ab%e9%97%b4%e9%9a%94%e6%97%b6%e9%97%b4%e6%9c%80%e5%bf%ab%e4%b8%a4%e5%88%86%e9%92%9f%e8%8a%82%e7%ba%a6%e8%b5%84%e6%ba%90%e7%9a%84%e5%90%8c%e6%97%b6%e9%81%bf%e5%85%8d%e9%a2%91%e7%b9%81%e7%88%ac%e5%8f%96%e8%80%8c%e5%af%bc%e8%87%b4-ip-%e5%b0%81%e7%a6%81" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;h2 id="部署" class="heading-element">&lt;span>部署&lt;/span>
 &lt;a href="#%e9%83%a8%e7%bd%b2" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>如果不需要登录，缓存，可以直接部署到 Cloudflare Pages，Vercel 等。Fork 之后在对应平台上导入即可。&lt;/p>
&lt;p>Cloudflare Pages 需要填入构建命令 pnpm run build, 构建输出文件夹 dist/output/public。&lt;/p>
&lt;p>登录涉及到 Github Oauth，只需要 创建一个 Github App 即可，不需要申请任何权限。Callback URL 为 &lt;a href="https://your-domain.com/api/oauth/github"target="_blank" rel="external nofollow noopener noreferrer">https://your-domain.com/api/oauth/github&lt;/a>。&lt;/p>
&lt;p>然后就会得到 Client ID 和 Client Secret。关于环境变量，不同平台有不同的填写位置，请关注 example.env.server 文件。如果本地运行，需要将其重命名为 .env.server，然后按照要求添加。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># Github Clien ID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">G_CLIENT_ID=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Github Clien Secret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">G_CLIENT_SECRET=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># JWT Secret, 通常就用 Clien Secret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">JWT_SECRET=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 初始化数据库, 首次运行必须设置为 true，之后可以将其关闭
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INIT_TABLE=true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 是否启用缓存
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ENABLE_CACHE=true&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>