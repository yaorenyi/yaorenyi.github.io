[{"categories":["github"],"content":"为什么要配置自动发布 基于前两个部分组成方案中，一次更新过程如下： 在本地写好md文章 用hugo发布到public/目录下 复制到本地仓库(也可以将git本地仓库配置到public/目录下，但因为我同时也在用git管理md，这么做会将两个项目的git纠缠在一起，不够清爽，违背我的审美) 再推到远程仓库 这样做的弊端是： 本地必须管理两个git仓库，一个是hugo-md源码库，另一个是生成的静态网页库，增加了更新文章的复杂度； 发布必须先发一个本地，然后手动上传，也增加了出错的风险。 一个理想的状态是，我只负责写文，和将好的md提交到git备份，然后就可以坐等网站内容更新了。github官方提供的GitHub Action正可以满足这个需求。 这样的需求下，整个Github Action只需要做两件事： 编译，生成静态文件 部署，把静态文件移动到合适的位置 然后我们再通过git push来触发Github Action就可以了。 ","date":"2024-11-24","objectID":"/posts/github-action/:1:0","tags":["github"],"title":"Github Action","uri":"/posts/github-action/"},{"categories":["test"],"content":"第一篇文章 ","date":"2021-01-01","objectID":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/:1:0","tags":["test"],"title":"第一篇文章","uri":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"},{"categories":["test"],"content":"特性 ","date":"2021-01-01","objectID":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/:2:0","tags":["test"],"title":"第一篇文章","uri":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"},{"categories":["test"],"content":"优雅的设计，优雅的阅读体验，时刻关注最新最热的新闻。 ","date":"2021-01-01","objectID":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/:2:1","tags":["test"],"title":"第一篇文章","uri":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"},{"categories":["test"],"content":"支持 Github 登录，支持数据同步。 ","date":"2021-01-01","objectID":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/:2:2","tags":["test"],"title":"第一篇文章","uri":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"},{"categories":["test"],"content":"默认 30 分钟缓存，登录用户可以强制拉取最新数据。但也会根据内容源的更新间隔设置不同的爬虫间隔时间（最快两分钟），节约资源的同时避免频繁爬取而导致 IP 封禁。 ","date":"2021-01-01","objectID":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/:2:3","tags":["test"],"title":"第一篇文章","uri":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"},{"categories":["test"],"content":"部署 如果不需要登录，缓存，可以直接部署到 Cloudflare Pages，Vercel 等。Fork 之后在对应平台上导入即可。 Cloudflare Pages 需要填入构建命令 pnpm run build, 构建输出文件夹 dist/output/public。 登录涉及到 Github Oauth，只需要 创建一个 Github App 即可，不需要申请任何权限。Callback URL 为 https://your-domain.com/api/oauth/github。 然后就会得到 Client ID 和 Client Secret。关于环境变量，不同平台有不同的填写位置，请关注 example.env.server 文件。如果本地运行，需要将其重命名为 .env.server，然后按照要求添加。 # Github Clien ID G_CLIENT_ID= # Github Clien Secret G_CLIENT_SECRET= # JWT Secret, 通常就用 Clien Secret JWT_SECRET= # 初始化数据库, 首次运行必须设置为 true，之后可以将其关闭 INIT_TABLE=true # 是否启用缓存 ENABLE_CACHE=true ","date":"2021-01-01","objectID":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/:3:0","tags":["test"],"title":"第一篇文章","uri":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"}]